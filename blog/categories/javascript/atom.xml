<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | Mark Daggett's Blog]]></title>
  <link href="http://heavysixer.github.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://heavysixer.github.com/"/>
  <updated>2013-12-02T07:29:38-06:00</updated>
  <id>http://heavysixer.github.com/</id>
  <author>
    <name><![CDATA[Mark Daggett]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introducing Expert JavaScript]]></title>
    <link href="http://heavysixer.github.com/blog/2013/11/28/introducing-expert-javascript/"/>
    <updated>2013-11-28T09:03:00-06:00</updated>
    <id>http://heavysixer.github.com/blog/2013/11/28/introducing-expert-javascript</id>
    <content type="html"><![CDATA[<p>As many of you know I have spent much of the last six months writing a book on <code>JavaScript &lt;http://www.amazon.com/dp/1430260971&gt;</code>_. I am pleased to announce that last week APress began shipping it out to stores and distribution centers everywhere.</p>

<p>In my mind, good technical books are part mixtape, treasure map, and field journal. "<code>Expert JavaScript &lt;http://www.amazon.com/dp/1430260971&gt;</code>_" is the result of my efforts to successfully weave these forms together into a compelling and information-rich book about JavaScript. A mixtape, for those old enough to remember, is a curated collection of songs. These tapes were often made
as gifts for friends, lovers, and those in between. The mixer would craft the tape by selecting personal favorites or organizing tracks along a conceptual thread. Often these tapes were a surrogate for the mixer, a way to be remembered by the listener when the tape was playing. This book is a mixtape for JavaScript that I made for you. These chapters cover some of my favorite aspects of the language, but also includes less-understood topics because they are not easily explained in a tweet or blog post. The long form format of a book affords these subjects the necessary room to breathe.</p>

<p>As a child, I found the idea of finding a treasure map a thrilling prospect. I was captivated by the idea that anyone could become rich as long as they followed the map. This book will not lead you to buried treasure, but it is a map of sorts. I laid out these chapters to chart the inner workings of the language, which you can follow to the end. Dig through these concepts with me and you will unearth a deeper understanding of JavaScript than when you started.</p>

<p>A field journal is kept by scientists. They are taught to keep a log of their thoughts, observations, and hunches about their subject. They may even tape leaves, petals, or other artifacts of nature between its pages. It's a highly contextual diary about a subject of study filtered through a specific point of view. The purpose of the field journal is to be a wealth of information that the scientist can continually mine when they are no longer in the field.</p>

<p>"<code>Expert JavaScript &lt;http://www.amazon.com/dp/1430260971&gt;</code>_" is my field journal of JavaScript, which I wrote to return to often. I will use it to help me remember and understand the particulars of the language. I encourage you to do the same. Scribble in the margins, highlight sections, and bookmark pages. It is not a precious object; it is meant to be a living document that is improved through your use.</p>

<h2>Table Of Contents (with comments)</h2>

<ul>
<li>Chapter 1: Objects and Prototyping (What JavaScript is and isn't)</li>
<li>Chapter 2: Functions (Deep dive into functions including changes in es6)</li>
<li>Chapter 3: Getting Closure (Understanding the dark arts of closures)</li>
<li>Chapter 4: Jargon and Slang (lexical border guards to the community)</li>
<li>Chapter 5: Living Asynchronously (promises, coroutines, webworkers)</li>
<li>Chapter 6: JavaScript IRL (nodebots, JohnnyFive, node-serialport, firmata )</li>
<li>Chapter 7: Style (understanding programmatic style)</li>
<li>Chapter 8: Workflow (sensible workflow for JavaScript developers)</li>
<li>Chapter 9: Code Quality (how to evaluate and improve quality in code)</li>
<li>Chapter 10: Improving Testability (what really makes code "untestable," hint it's not the code)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional Illiteracy In JavaScript]]></title>
    <link href="http://heavysixer.github.com/blog/2013/03/04/functional-illiteracy-in-javascript/"/>
    <updated>2013-03-04T21:36:00-06:00</updated>
    <id>http://heavysixer.github.com/blog/2013/03/04/functional-illiteracy-in-javascript</id>
    <content type="html"><![CDATA[<p>Aside from it being an <em>epic</em> pun, what does it mean to be a functionally illiterate developer?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</p>

<p>When someone cannot read or write in their native language, they are considered functionally illiterate. This
level of illiteracy means that they subsist in their daily life through their ability to speak fluently, and
recognize certain written keywords. Illiteracy is not a sign of stupidity; in many cases it is the result a lack
of opportunity to learn. However, illiteracy does stunt the potential of otherwise bright people. The sad fact is
their inability to participate in society through the mastery of language makes them at higher risk of being in
poverty and committing crime.</p>

<p>Most computer languages are written, not spoken (try speaking JavaScript out loud and you'll see what I mean).
Therefore, being able to write code does not make you literate. Being an illiterate developer means that you skim
across the surface of the language, copying snippets of code from others trying cobble, together a working program with
little or no understanding of how or why it works.</p>

<p>As with illiterates in the wider world, illiterate developers are not unintelligent. Often it means that they
didn't have the luxury of taking a deep dive through the mechanics of the programming language. Many illiterate
developers are practicing software professionals, backed into a corner by impending deadlines, or lack of
resources. Perhaps they started in other fields such as graphic design, or business and find themselves scurrying
along the surface of the language, learning in fits and starts as they go along.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamic Spotlight Effect Using CSS and JavaScript]]></title>
    <link href="http://heavysixer.github.com/blog/2013/03/04/dynamic-spotlight-effect-using-css-and-javascript/"/>
    <updated>2013-03-04T13:27:00-06:00</updated>
    <id>http://heavysixer.github.com/blog/2013/03/04/dynamic-spotlight-effect-using-css-and-javascript</id>
    <content type="html"><![CDATA[<p>In casual gaming there is a convention whereby the player is introduced to the interface during the first play
cycle. Typically, this involves a character from the game pointing out aspects of the interface and telling the
player how to use it and why they should care. Ideally, you want to visually draw the attention of the player to
the relevant component of the interface as the characters are explaining it. For this purpose I created a
JavaScript class which will spotlight a portion of the screen using only CSS and JavaScript. Here is an example of
it <code>working &lt;http://jsfiddle.net/HFnYC/&gt;</code>_.</p>

<p>The class allows you to configure the following spotlight attributes:</p>

<ul>
<li>starting x,y (integer)</li>
<li>destination x,y (integer)</li>
<li>duration (0%-100%)</li>
<li>callback when animation is complete (function)</li>
</ul>


<p>Below is the CSS and JavaScript you'll need to use it in your own projects. If you improve this script please let me
know.</p>

<p>.. code-block:: html</p>

<p>  <div id="spotLight"></div></p>

<p>.. code-block:: css</p>

<p>  #spotLight {</p>

<pre><code>width:1024px;
height:768px;
z-index:9;
position:absolute;
display:none;
</code></pre>

<p>  }</p>

<p>.. code-block:: javascript</p>

<p>  function SpotLight(element) {</p>

<pre><code>this.element = element;
this.x = element.width() / 2;
this.y = element.height() / 2;
this.show = function() {
  element.hide();
  element.removeClass("hide");
  return element.fadeIn('fast');
};
this.hide = function(callback) {
  element.fadeOut('fast', function() {
    if (callback) {
      return callback();
    }
  });
  return element.addClass("hide");
};
this.move = function(opts) {
  var endX, endY, obj;
  obj = $.extend({}, {
    start_x: this.x,
    start_y: this.y,
    x: this.x,
    y: this.y,
    aperture: "50%",
    duration: 1000,
    done: function() {}
  }, opts);
  endX = obj.x;
  endY = obj.y;
  obj.x = obj.start_x;
  obj.y = obj.start_y;
  return jQuery(obj).animate({
    x: endX,
    y: endY
  }, {
    duration: obj.duration,
    step: function() {
      var style, _i, _len, _ref;
      _ref = ["-moz-radial-gradient(" + this.x + "px " + this.y + "px, ellipse cover,  rgba(0,0,0,0) 0%, rgba(0,0,0,0.8) " + this.aperture + ", rgba(0,0,0,0.8) 100%)", "-webkit-gradient(radial, " + this.x + "px " + this.y + "px, 0px, " + this.x + "px " + this.y + "px, 100%, color-stop(0%,rgba(0,0,0,0)), color-stop(" + this.aperture + ",rgba(0,0,0,0.8)), color-stop(100%,rgba(0,0,0,0.8)))", "-webkit-radial-gradient(" + this.x + "px " + this.y + "px, ellipse cover,  rgba(0,0,0,0) 0%,rgba(0,0,0,0.8) " + this.aperture + ",rgba(0,0,0,0.8) 100%)", "-o-radial-gradient(" + this.x + "px " + this.y + "px, ellipse cover,  rgba(0,0,0,0) 0%,rgba(0,0,0,0.8) " + this.aperture + ",rgba(0,0,0,0.8) 100%)", "-ms-radial-gradient(" + this.x + "px " + this.y + "px, ellipse cover,  rgba(0,0,0,0) 0%,rgba(0,0,0,0.8) " + this.aperture + ",rgba(0,0,0,0.8) 100%)", "radial-gradient(ellipse at " + this.x + "px " + this.y + "px,  rgba(0,0,0,0) 0%,rgba(0,0,0,0.8) " + this.aperture + ",rgba(0,0,0,0.8) 100%)"];
      for (_i = 0, _len = _ref.length; _i &lt; _len; _i++) {
        style = _ref[_i];
        element.css({
          "background": style
        });
      }
      return true;
    },
    done: obj.done
  });
};
return this;
</code></pre>

<p>  }</p>

<p>  // Example Usage:
  var spotLight = new SpotLight($("#spotLight"))
  spotLight.show();
  spotLight.move({ x: 150, y: 650 });</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[racing and profiling]]></title>
    <link href="http://heavysixer.github.com/blog/2013/03/01/racing-and-profiling/"/>
    <updated>2013-03-01T09:08:00-06:00</updated>
    <id>http://heavysixer.github.com/blog/2013/03/01/racing-and-profiling</id>
    <content type="html"><![CDATA[<p>I've been experimenting with various ways to profile, and explore JavaScript as it executes in the runtime environment. Mostly I've been
experimenting with the rKelly and rubyracer gems. Both gems are written by people much smarter than myself so there is lots to learn and
explore inside their source. I was talking to the very friendly <code>Charles Lowell &lt;https://twitter.com/cowboyd&gt;</code>_, creator of the rubyracer
and he shared this great snippet with me, which allows you to turn on the v8 profiler while the rubyracer is running. Because this is an
undocumented hook I thought I'd share it here:</p>

<p>.. code-block:: ruby</p>

<p>  ruby -Ilib -Iext -rv8 -e 'V8::C::V8::SetFlagsFromString("--prof"); V8::Context.new() {|c| puts c.eval("5 + 1")}; V8::C::V8::PauseProfiler()'</p>

<p>This will produce a <em>v8.log</em> file wherever you executed the script from. Inside the file there is a gluttonous amount of data, which will
take some time to parse through but in general it looks a bit like this:</p>

<p>::</p>

<p>  code-creation,LoadIC,0x127fc3e29140,181,"A load IC from the snapshot"
  code-creation,KeyedLoadIC,0x127fc3e29200,181,"A keyed load IC from the snapshot"
  code-creation,StoreIC,0x127fc3e292c0,183,"A store IC from the snapshot"
  code-creation,KeyedStoreIC,0x127fc3e29380,183,"A keyed store IC from the snapshot"
  code-creation,Builtin,0x127fc3e29440,97,"A builtin from the snapshot"
  code-creation,Builtin,0x127fc3e294c0,137,"A builtin from the snapshot"
  code-creation,Script,0x127fc3e14e20,980,"native string.js",0x2e87cc50ec50,
  code-creation,LazyCompile,0x127fc3e15500,1616,"SetUpString native string.js:940",0x2e87cc5129c8,
  code-creation,LazyCompile,0x127fc3e15be0,472," native string.js:36",0x2e87cc512ab0,
  code-creation,Script,0x127fc3e15dc0,336,"native array.js",0x2e87cc512e00,
  code-creation,LazyCompile,0x127fc3e15f20,2544,"SetUpArray native array.js:1469",0x2e87cc5175b0,
  code-creation,LazyCompile,0x127fc3e16920,340,"SetUpArray.b native array.js:1482",0x2e87cc517668,
  code-creation,Script,0x127fc3e16b00,552,"native regexp.js",0x2e87cc5177f0,
  code-creation,LazyCompile,0x127fc3e16d40,388,"RegExpConstructor native regexp.js:86",0x2e87cc518a70,
  code-creation,LazyCompile,0x127fc3e16ee0,280,"RegExpMakeCaptureGetter native regexp.js:363",0x2e87cc519288,
  code-creation,LazyCompile,0x127fc3e17000,668," native regexp.js:364",0x2e87cc519340,
  code-creation,LazyCompile,0x127fc3e172a0,2304,"SetUpRegExp native regexp.js:403",0x2e87cc519488,
  code-creation,LazyCompile,0x127fc3e17ba0,292,"SetUpRegExp.a native regexp.js:422",0x2e87cc519540,
  code-creation,LazyCompile,0x127fc3e17ce0,256,"SetUpRegExp.c native regexp.js:426",0x2e87cc519658,</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript ParseTrees]]></title>
    <link href="http://heavysixer.github.com/blog/2013/02/27/javascript-parsetrees/"/>
    <updated>2013-02-27T20:22:00-06:00</updated>
    <id>http://heavysixer.github.com/blog/2013/02/27/javascript-parsetrees</id>
    <content type="html"><![CDATA[<p>I've been experimenting with the rkelly Ruby gem to help me explore the JavaScript parse tree. It is really fascinating, and I can see
myself spending a lot of time spelunking through the language. Here is a simple example using the gem to iterate over each node in the
parse tree and print out its type. Stay tuned, more to come!</p>

<p>.. code-block:: ruby</p>

<p>  require 'rubygems'
  require 'rkelly'
  parser = RKelly::Parser.new
  src = &lt;&lt;EOF
  // Create scrollLeft and scrollTop methods
  jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {</p>

<pre><code>var top = "pageYOffset" === prop;

jQuery.fn[ method ] = function( val ) {
  return jQuery.access( this, function( elem, method, val ) {
    var win = getWindow( elem );

    if ( val === undefined ) {
      return win ? win[ prop ] : elem[ method ];
    }

    if ( win ) {
      win.scrollTo(
        !top ? val : window.pageXOffset,
        top ? val : window.pageYOffset
      );

    } else {
      elem[ method ] = val;
    }
  }, method, val, arguments.length, null );
};
</code></pre>

<p>  });</p>

<p>  function getWindow( elem ) {</p>

<pre><code>return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 &amp;&amp; elem.defaultView;
</code></pre>

<p>  }
  EOF
  ast = parser.parse(src)</p>

<p>  =begin
  Outputs something like this as it traverses the parseTree
  RKelly::Nodes::SourceElementsNode
  RKelly::Nodes::ExpressionStatementNode
  RKelly::Nodes::FunctionCallNode
  RKelly::Nodes::DotAccessorNode
  RKelly::Nodes::ResolveNode
  RKelly::Nodes::ArgumentsNode
  RKelly::Nodes::ObjectLiteralNode
  RKelly::Nodes::PropertyNode
  ...
  =end</p>

<p>  ast.each do |node|</p>

<pre><code>puts node.class
</code></pre>

<p>  end</p>
]]></content>
  </entry>
  
</feed>
