<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: CSS | Mark Daggett's Blog]]></title>
  <link href="http://heavysixer.github.com/blog/categories/css/atom.xml" rel="self"/>
  <link href="http://heavysixer.github.com/"/>
  <updated>2013-03-01T09:29:52-06:00</updated>
  <id>http://heavysixer.github.com/</id>
  <author>
    <name><![CDATA[Mark Daggett]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CYA With CSS]]></title>
    <link href="http://heavysixer.github.com/blog/2013/02/21/cya-with-css/"/>
    <updated>2013-02-21T12:27:00-06:00</updated>
    <id>http://heavysixer.github.com/blog/2013/02/21/cya-with-css</id>
    <content type="html"><![CDATA[<p>Using Design Time Classes To Polish Your Product
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</p>

<p>This post is dedicated to <em>CYA</em> with <em>CSS</em>; for the uninitiated CYA means "cover your ass", and I assume that anyone reading my blog already
knows what CSS is. Just as you can craft the JavaScript on your website to act defensively against unforeseen errors, so too can you use
CSS at the design stage to ensure you don't end up with egg on your face post-launch.</p>

<p>A while back, I was viewing the Github's source code (man I sound like such a nerd), and I noticed these classes added to their body
tags: "<em>logged_in page-dashboard macintosh  env-production</em>". Several of these classes are obviously progressive enhancement style
additions meant to change the layout / features of the page based on the visitor's browser. In my own sites I often include the controller
and action params into the body tag so that I can scope my JavaScript and CSS executions. Doing this provides a convenient way to namespace
your CSS and JS, without having to worry about polluting the global namespace.</p>

<p>However one of Github's additions stuck out at me "env-production".
I have to imagine that <code>Kyle Neath &lt;http://http://warpspire.com/&gt;</code>_ was the one who added this to the page, and that he did it because
he wants the site to render differently based on the runtime environment of the sever.</p>

<p>I thought about the possibilities of this technique and figured out that there are probably a whole host of ways to use these
<strong>design time classes</strong>. The use of which would help ensure a polished final project. Here are just a couple of examples of how you
might use them:</p>

<ol>
<li>If you are using a specific grid layout you could set an image to appear as a <code>background-image</code> of the body. Doing this would
ensure your page conforms the the correct visual spacing and vertical rhythm. I know that "Blueprint CSS" used to have something like
this back in the day. It might look something like this:</li>
</ol>


<p>.. code-block:: css</p>

<p>  body.env-development {</p>

<pre><code>background: url('/assets/grid.png') no-repeat scroll top left !important;
</code></pre>

<p>  }</p>

<ol>
<li>Often as developers we'll mock in a bit of functionality that the design calls for with the intention of making it work later.
Unfortunately, this can mean that dead links get deployed. Here is how you could use a CSS selector and a design time class to
color code all the links <em>without</em> a href attribute. This example adds a gaudy eye-searing color to all the dead links, to ensure you
fix it before you deploy into production.</li>
</ol>


<p>.. code-block:: css</p>

<p>  body.env-development {</p>

<pre><code>a:not([href]) {
  color:#00FF00 !important;
  background-color:#ff00ff !important; 
}
</code></pre>

<p>  }</p>

<p>The best thing about design time classes is that because they are properly scoped to the body they just <em>disappear</em> in the production
environment. This means you don't have to worry about them being seen by the end user.</p>

<p>If you are using Rails it's a pretty straight forward process to get these classes into your application.</p>

<p>.. code-block:: haml</p>

<p>  %body{ :class => "#{app_classes}" }</p>

<p>In your application helper you'd add something like this:</p>

<p>.. code-block:: ruby</p>

<p>  def app_classes</p>

<pre><code>"#{Rails.env} #{params[:controller].gsub('/',' ')} #{params[:action]}"
</code></pre>

<p>  end</p>

<ol>
<li>Kyle suggested over twitter that another good use is to <code>change the favicon &lt;https://twitter.com/kneath/status/304706570246299648/photo/1&gt;</code>_ based on the server environment.</li>
</ol>


<p>More To Come
~~~~~~~~~~~~</p>

<p>Do you use Design time classes? If so what are they, share them in the comments or as a gist and maybe we can develop a nice resource
of helpful snippets for others.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS Anti-patterns]]></title>
    <link href="http://heavysixer.github.com/blog/2011/12/04/css-anti-patterns/"/>
    <updated>2011-12-04T11:06:00-06:00</updated>
    <id>http://heavysixer.github.com/blog/2011/12/04/css-anti-patterns</id>
    <content type="html"><![CDATA[<p>Over the last month of two I have been working on a large enterprise Rails site. The backend has been implemented by a core group of developers but the frontend CSS and HTML have been handed off several times. As I worked to refactor some of the views I noticed several anti-patterns reoccurring in the code that I thought I would highlight and propose work arounds. While all of the examples I present in this file are extracted directly from the site in question I have seen them occur over and over again on other projects.</p>

<h2>1. Unclear Naming Conventions</h2>

<p>If a tag in an HTML page performs a task then a good CSS name should describe what the job is. It should have semantic value and should not where possible describe only visual attributes.</p>

<p>``` css Anti-pattern Example</p>

<pre><code>.teal {
color: #1EC5E9;
font-style: italic
}
</code></pre>

<p>```</p>

<p>This class name gives very little semantic value to tag it is applied to. The class "teal" only describes the visualness of the tag. Furthermore this name is only relevant while the visual design of the page stays the same. If the design changes then every instance of the "teal" class will need to be removed throughout the codebase if the color changes. What is worse is if the CSS attributes within the class are updated without changing the name then the name becomes meaningless. A better approach would be to understand what the teal color is for. If it is meant to draw emphasis to a bit of text then choose a name like "highlight" so that it is more clear what job it is to perform.</p>

<h2>2. Invalid Declarations</h2>

<p>When writing CSS periodically run your classes through a CSS validator to ensure its syntax is correct. The problem with invalid declarations is that they may not break the tag in question but may corrupt the rest of the cascade causing classes defined later in the file from working. Whenever I am hunting down a CSS error the first thing I do is ensure I am working off a valid document. I can't tell you how many times just fixing the code in one part of the file fixed mystery bugs that appeared lower in the document.</p>

<h2>3. Unnecessary verboseness</h2>

<p>  Where possible try to compact your CSS attributes into one line:</p>

<p><code>css Anti-pattern Example
  background: #2175BE;
  background-image: url(../images/bottomshadownav.png);
  background-position: bottom;
  background-repeat: repeat-x;
</code></p>

<p><code>css Improved Version
  background: #2175BE url(../images/bottomshadownav.png) repeat-x bottom;
</code></p>

<h2>4. Overly Specific Classes</h2>

<p>I strive to make CSS classes do only one thing. That does not mean that my classes only have only one attribute declaration, but it means that I try to assign them only one job to perform. This allows me to build up complex behaviors and visuals to html tags by combining several simple CSS classes. Resist the urge to add properties to your class that doesn't describe the job it does. This will also make your HTML more clear to read, and easier to extend. Consider the two examples below:</p>

<p>``` css Anti-pattern Example
  .slider {</p>

<pre><code>height: 27px;
float: left;
</code></pre>

<p>  }
```</p>

<p>``` css Improved Version
  .slider {</p>

<pre><code>height: 27px;
</code></pre>

<p>  }
  .left {</p>

<pre><code>float: left;
</code></pre>

<p>  }
```</p>

<h2>5. Browser Specific Overrides</h2>

<p>Where possible resist the urge to place browser specific hacks in the master CSS file. The proper approach is to peel these classes off into an override stylesheet that will be loaded only when the user is using that particular browser. The reason we put override classes in their own file is for two reasons. It simplifies the master CSS file, and gives the developer an easy way to eliminate CSS from the site when the site no longer needs to support a deprecated browser.</p>

<p><code>css Anti-pattern Example
  .decile img {
  _margin: 0px /* IE 6 Hack */
  }
</code></p>

<h2>6. Needless Duplication</h2>

<p>Part of writing good CSS is to generalize common tasks where possible. In the example below you'll notice that both classes are essentially the same.</p>

<p><code>css Anti-pattern Example
  .comparator a {
  margin-right: 3px;
  padding: 3px 13px 3px 13px;
  }
  .ambition a {
  padding: 3px 13px 3px 13px;
  margin-right: 3px
  }
</code></p>

<p>``` css Improved Version
  a.link {</p>

<pre><code>padding: 3px 10px 3px 10px;
margin-right: 3px
</code></pre>

<p>  }
```</p>

<h2>7. Overuse of exclamation point</h2>

<p>The "!" override is a brute force method to ensure an attribute of your class cannot be overwritten. This should be used as a last resort and not to mask poor design or abstraction of classes. Overuse of the exclamation point is like a shouting match between all your CSS classes, almost never ends well.</p>

<h2>8. "Cargo Culting" through Copy + Paste</h2>

<p>Copying CSS en masse and pasting it into the document without making fundamental changes to the class can be a sign of disconnect between the designer and developer or a signal that the developer / designer doesn't know (or care) about how the copied CSS works. Bulk copying CSS creates deadweight in the CSS file and makes it harder to maintain and extend.</p>

<p>In the first case where a developer is implementing a design given to them by a front-end developer it is entirely possible the developer won't know how the CSS works. Later, they may find themselves needing to replicate a style elsewhere in the site. Often this means they bulk copy several classes and paste them elsewhere in the document. Typically, they make a trivial changes needed e.g. change the font-size and then rename the class. The proper approach would be to abstract the first class so that it is more generalized and can service both instances of how it needs to be implemented.</p>

<p>However, I found several examples where entire blocks of code appeared three and four times in the same file with absolutely no difference! This is absolutely unacceptable in a professional product.</p>

<h2>9. Unused Classes</h2>

<p>With any site under constant development it is easy for classes to become unused within the html. Developers and designers must make it part of their development process to remove unused classes from the CSS otherwise the site can become bogged down with all the deadweight inside the CSS file. There are projects like "deadweight" which are specifically dedicated to helping you prune your CSS of unused code.</p>

<h2>10. Needless Namespacing</h2>

<p>Namespacing is used to change the way a child class works when its parent class changes. This is a great way to keep your HTML and CSS flexible because it means that a single change to the parent element can change the look and feel of all the containing children. However, if you over namespace your CSS by binding it to specific html tags where not absolutely needed you make the CSS brittle and hard to maintain.</p>

<p><code>css Anti-pattern Example
  .qipp-inputs table tr.metric td.metric_name {
  border-bottom: 1px dotted #B6CBD2;
  padding-left: 20px;
  text-align: left !important;
  }
</code></p>

<p><code>css Improved Example
  .qipp-inputs .metric td.metric_name {
  border-bottom: 1px dotted #B6CBD2;
  padding-left: 20px;
  text-align: left !important;
  }
</code></p>

<p>I welcome any discussion or feedback on these patterns and would love to improve this document where possible. What anti-patterns have you seen in CSS files you've worked on?</p>
]]></content>
  </entry>
  
</feed>
